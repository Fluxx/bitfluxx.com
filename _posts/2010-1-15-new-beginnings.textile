---
layout: post
title: New Beginnings
---

Back in late 2007, my girlfriend and I started a hobby web/content development company called "GLUEinteractive":http://gluei.com.  I had been doing off and on freelance development for a while and decided to make it somewhat official by creating a website, getting a business license and actually "doing it right."  I made the site in CakePHP, backed by MySQL and a customer-created user login and blogging platform.  It felt pretty neat.

Almost 4 years later, I've left PHP in my rear view mirror and consider myself a very different software engineer.  At the time I lived and breathed PHP.  We used it at work and I used it personally.  Shortly after I finished the GLUEinteractive website, however, I was introduced to Ruby by a coworker.  He gave me the pickaxe book to read, and I've never looked back since then.

My experience with the PHP community was that PHP doesn't really _have_ a "community".  PHP developers tender to mirror the design of the language and its "that'll do" attitude.  Most developers either code things from scratch, or download an existing solution from somewhere on the internet and hack at it to make it work for them.  No focus is given on consistency, reusability or integration with anyone outside the single project.  The result is usually mountains of code to solve common problems common to all PHP applications.

Ruby, on the other hand, is full of examples of the community coming together and solving problems in an organized way.  "Rack":http://rack.rubyforge.org/, for example, standardized the web server interface for nearly all ruby applications.  "Rake":http://rake.rubyforge.org/ is another good example, as is "Bundler":http://gembundler.com/ or the "Rubygems":http://rubygems.org system itself.  Smart people collaborated with other smart people to create software that solves common problems.  And now all ruby developers can leverage that work.

Consequently, this blog is built upon the simple projects of "Jekyll":https://github.com/mojombo/jekyll for the markup and "Compass":https://github.com/chriseppstein/compass for the CSS.  It's hosted on "Heroku":http://www.heroku.com.  These are the already established best practices for static HTML generation, CSS frameworks and simple hosting.  And because of the awesome ruby community I'm able to leverage all their hard work to let me focus on blogging, and not mucking with CSS or Apache.

I will likely be moving over some old related-posts from GLUEinteractive, but this blog is a fresh start for me.  Expect content about software engineering, web development and ruby.  I promise to blog at least weekly, but hopefully more often.

Stay tuned!
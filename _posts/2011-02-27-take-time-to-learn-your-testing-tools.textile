---
layout: post
title: Take Time to Learn Your Testing Tools
---

Last week I was listening to the Changelog podcast where they were "interviewing Scott Chacon":http://thechangelog.com/post/3445186374/episode-0-4-9-git-showoff-and-xbox-kinect-with-scott-cha.  They talked about a lot of good stuff, but one interesting point Scott made about version control struck me.  I was unable to find a transcript of the podcast, so this is my paraphrasing:

bq. In colleges and programming education, version control isn't taught as a toolset that is important.  People see it as a necessary evil, not, "this is a tool that can make you a better developer or better at your job."  Git is more complicated (than Subversion), but it's worth learning about it.  When people learn Subversion, it's usually, "alright, here are the eight commands you need, and that's it."  But learning version control is important -- it's as important as learning your editor.  Everyone spends hours learning their editor, and people become incredibly proficient with it.  Nobody uses notepad for development, but people use Subversion like Notepad.  People don't treat it as a toolset that gives you power.

It's a very valid point.  Git is more powerful than Subversion, but _in order to harness that power, you have to actually sit down and learn it._  Otherwise, it's just a complicated toolset which gets in your way and endlessly frustrates you.

I see a similar parallel with peoples' attitudes on unit testing.  Some developers declare that, "unit testing is a waste of time."  They'll reference situations where test suites take minutes (or hours) to run, or overly invasive test suite where changing any functionality causes so many tests to break, way more time is spent fixing tests than actually making the change in the first place.

The problem I have with this attitude is that most of the time, the developers who hold these opinions have never bothered to learn about unit testing tools, techniques or styles beyond the basic set of commands and skill sets.  They're unit testing like Notepad.

Unit testing is a tool for the developer, no more no less.  Simply using it isn't going to lower your software defect rate any more than simply using a hammer is going to build you a well made house.  You need to learn how to _use_ tools to best see, understand and leverage the value they provide.

For me, I use unit testing as a tool in the following ways:

# By doing TDD, I think about my interface before I code it.  I'm able to flesh out architectural issues during development.
# A test suite helps give me confidence my future refactoring won't break existing behavior.
# A test suite helps accommodate for the lack of a QA department at my job.

How you use unit testing is up to you -- there is no "right" way to do it.  You certainly don't have to do it for the same reasons that I do.  Ask yourself, "gow can I use this tool to make me better at my job? How are people using it successfully?  What can I learn from their ideas and experiences?  How does it fit in with my project/work style."